{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/listing.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/tag.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/tag-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/tag.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"names":["BlogListItem","post","showTags","mb","a","as","Link","to","slug","sx","fontWeight","fontSize","color","title","mt","date","tags","Fragment","Listing","posts","className","map","key","Tag","pageContext","useSiteMetadata","tagsPath","basePath","name","alignItems","justifyContent","flexFlow","variant","replaceSlashes","TagComponent","data","allPost","nodes","ItemTags","tag","i"],"mappings":"sMAgDeA,EA5BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,YAAC,IAAD,CAAKC,GAAI,GACP,YAAC,IAAOC,EAAR,CACEC,GAAIC,OACJC,GAAIN,EAAKO,KACTC,GAAI,CAAEC,WAAY,WAAYC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SAEzDX,EAAKY,OAER,iBACEJ,GAAI,CACFG,MAAO,YACPE,GAAI,EACJV,EAAG,CAAEQ,MAAO,aACZD,SAAU,CAAC,EAAG,EAAG,KAGnB,wBAAOV,EAAKc,MACXd,EAAKe,MAAQd,GACZ,YAAC,IAAMe,SAAP,WAEE,YAAC,IAAD,CAAUD,KAAMf,EAAKe,WCfhBE,EARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,IAAqBlB,gBAArB,gBACd,uBAASO,GAAI,CAAEN,GAAI,CAAC,EAAG,EAAG,IAAMiB,UAAWA,GACxCD,EAAME,KAAI,SAAApB,GAAI,OACb,YAAC,EAAD,CAAcqB,IAAKrB,EAAKO,KAAMP,KAAMA,EAAMC,SAAUA,S,wBC0B3CqB,EAnBH,SAAC,GAAqC,IAAnCJ,EAAmC,EAAnCA,MAAOK,EAA4B,EAA5BA,YAA4B,EACjBC,cAAvBC,EADwC,EACxCA,SAAUC,EAD8B,EAC9BA,SAElB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKd,MAAK,SAAWW,EAAYI,OACjC,YAAC,IAAD,CAAMnB,GAAI,CAAEoB,WAAY,SAAUC,eAAgB,gBAAiBC,SAAU,SAC3E,YAAC,IAAD,CAASC,QAAQ,KAAK3B,GAAG,MACtBmB,EAAYI,MAEf,YAAC,IAAOxB,EAAR,CAAUC,GAAIC,OAAMG,GAAI,CAAEuB,QAAS,mBAAqBzB,GAAI0B,YAAe,IAAIN,EAAL,IAAiBD,IAA3F,cAIF,YAAC,EAAD,CAASP,MAAOA,EAAOV,GAAI,CAAEK,GAAI,CAAC,EAAG,QCvC5BoB,UCQA,YAAkC,IAA/BC,EAA+B,EAA/BA,KAAMX,EAAyB,EAAzBA,YACdY,EAAYD,EAAZC,QAER,OAAO,kBAAC,EAAD,CAAKjB,MAAOiB,EAAQC,MAAOb,YAAaA,M,kCCdjD,yEA8Bec,IAjBE,SAAC,GAAwB,IAAtBtB,EAAsB,EAAtBA,KAAsB,EACTS,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMV,SAAP,KACGD,EAAKK,KAAI,SAACkB,EAAKC,GAAN,OACR,kBAAC,IAAMvB,SAAP,CAAgBK,IAAKiB,EAAI/B,QACpBgC,GAAF,KACD,kBAAC,IAAOpC,EAAR,CAAUC,GAAIC,OAAMC,GAAI0B,YAAe,IAAIN,EAAL,IAAiBD,EAAjB,IAA6Ba,EAAI/B,OACpE+B,EAAIX","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-tag-query-tsx-60fd28d2e1b9e391cd7b.js","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport { jsx, Styled } from \"theme-ui\";\nimport { Box } from \"@theme-ui/components\";\nimport { Link } from \"gatsby\";\nimport ItemTags from \"@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags\";\n\ntype BlogListItemProps = {\n  post: {\n    slug: string;\n    title: string;\n    date: string;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  };\n  showTags?: boolean;\n};\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Styled.a\n      as={Link}\n      to={post.slug}\n      sx={{ fontWeight: `semibold`, fontSize: [1, 2, 3], color: `text` }}\n    >\n      {post.title}\n    </Styled.a>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2]\n      }}\n    >\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n);\n\nexport default BlogListItem;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [2, 3, 4] }} className={className}>\n    {posts.map(post => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Styled } from \"theme-ui\"\nimport { Flex, Heading } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\nimport Listing from \"@lekoarts/gatsby-theme-minimal-blog/src/components/listing\"\nimport replaceSlashes from \"@lekoarts/gatsby-theme-minimal-blog/src/utils/replaceSlashes\"\nimport SEO from \"@lekoarts/gatsby-theme-minimal-blog/src/components/seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <SEO title={`תגית: ${pageContext.name}`} />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading variant=\"h2\" as=\"h2\">\n          {pageContext.name}\n        </Heading>\n        <Styled.a as={Link} sx={{ variant: `links.secondary` }} to={replaceSlashes(`/${basePath}/${tagsPath}`)}>\n          כל התגיות\n        </Styled.a>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\nexport default Tag\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query($slug: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: \"DD.MM.YYYY\")\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Tag from \"../../../components/tag\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: any\n}\n\nexport default ({ data, pageContext }: Props) => {\n  const { allPost } = data\n\n  return <Tag posts={allPost.nodes} pageContext={pageContext} />\n}\n","import React from \"react\"\nimport { Styled } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useSiteMetadata()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Styled.a as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Styled.a>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"sourceRoot":""}